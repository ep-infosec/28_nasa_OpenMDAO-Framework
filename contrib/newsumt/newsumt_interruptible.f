C
C.....*********************************************************************....
C
C     Version  2.3  of  newsumt.f,  last updated  12/19/06  at  16:22:08.
C
C     Date of retrieval:  12/19/06 at 16:22:08.
C
C
C     This source is meant for use on all systems.
C
C
C.....*********************************************************************....
C
C
C        =====>>  Contents of  NEWSUMT.SRC(BLKDNS$)  <<=====
 
 
      BLOCK DATA
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON/CONTRL/C     , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
      COMMON/COUNTR/IOBJCT, IOBAPR, IOBGRD, ICONST, ICONGR, INLCGR
     *    , ICGAPR
      COMMON/OPTIME/TT(11)
      DATA C /0.2D0 /,EPSGSN/0.001D0/,EPSODM/0.001D0/,EPSRSF/0.005D0/
     *   , G0  /0.1D0 /,P  /0.5D0/,RA  /1.0D0/, RACUT /0.1D0 /
     *   , RAMIN/1.D-13/, STEPMX/2.0D0 /
     *   , JPRINT/1    /, JSIGNG/1    /, LOBJ  /0    /, MAXODM/6    /
     *   , MAXRSF/15   /, MFLAG /0    /, MAXGSN/20   /
     *   , FDCH  /0.05D0 /, TFTN  /0.0D0  /
     *   , IFD   /0    /, IFTN  /0    /, ISIGNO/0    /, IFLAPP/0    /
      DATA TT/0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,0.0D0,
     * 0.0D0,0.0D0,0.0D0,0.0D0,0.0D0/
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(DIRCTN$)  <<=====
 
 
      SUBROUTINE DIRCTN (ANALYS
     *  , BL    , BU    ,         DDOBJ , DF0   , DG    , DH    , DOBJ
     *          , FDCV  , FEST  , G     , GB    , G1    , G2
     *  , G3    , OBJ   , OBJMIN, S     , SN    , TFMIN , X     , X0
     *  , IIK   , ILIN  , IRUN  , ISIDE , JRUN  , N1    , N2
     *  , N3    , N4)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C * * PROGRAM NO.  LC0002P
C * * PROGRAMMER   L. CHENG,  H.MIURA
C * * SUBROUTINE TO FIND THE SEARCH DIRECTION BY THE MODIFIED
C     NEWTON'S METHOD.
C       X0    : INITIAL DESIGN
C       OBJ   : OBJECT FUNCTION
C       DOBJ  : GRADIENT OF OBJECT FUNCTION
C       DDOBJ : SECOND DERIVATIVE OF OBJECT FUNCTION
C       G     : CONSTRAINT FUNCTION
C       S     : DIRECTION SEARCHING VECTOR
C       SN    : NORMALIZED DIRECTION SEARCHING VECTOR
C       DG    : GRADIENT OF CONSTRAINT FUNCTIONS
C       DH    : FIRST DERIVATIVE OF TOTAL FUNCTION
C       NDV   : NUMBER OF DESIGN VARIABLES
C       NTCE  : NUMBER OF EFFECTIVE CONSTRAINTS
C       RA    : RESPONSE FACTOR
C       ALPHA : MOVE DISTANCE

cvvjdg - linux:  One line added below...
      External CTIME

      EXTERNAL ANALYS
      DIMENSION     BL(N1)  , BU(N1)  ,           DDOBJ(N3), DG(N4)
     *  , DH(N1)  , DOBJ(N1),           FDCV(N1), G(N2)    , GB(N2)
     *  , G1(N2)  , G2(N2)  , G3(N2)  , S(N1)   , SN(N1)   , X(N1)
     *  , X0(N1)
     *  , IIK(N1) , ILIN(N2), ISIDE(N1)
      COMMON/CONTRL/C     , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
      COMMON/COUNTR/IOBJCT, IOBAPR, IOBGRD, ICONST, ICONGR, INLCGR
     *    , ICGAPR
      COMMON/OPTIME/TTOTAL, TODM  , TDIRCN, TOBJCT, TOBAPR, TOBGRD
     *    , TCONST, TCONGR, TNLCGR, TCOAPR, TEQSOL
C

      NFLAG=0
      IF(LOBJ.NE.1) GO TO 90
      DO 80 I=1, N3
   80 DDOBJ(I)=0.0
   90 CONTINUE
      DO 110 I=1,NDV
      SN(I)=0.0
  110 X(I)=X0(I)
C
C  UPDATE TRANSITION POINT IF CURRENT DESIGN IS FEASIBLE.
C
      IF(NTCE.EQ.0) GO TO 130
      DO 120 I=1, NTCE
      IF(G(I).LE.0.0) GO TO 190
  120 CONTINUE
  130 DO 160 I=1, NDV
      IC=ISIDE(I)+1
      GO TO (160, 140, 150, 140), IC
  140 IF(X0(I).LT.BL(I)) GO TO 190
      IF(IC.EQ.2) GO TO 160
  150 IF(BU(I).LT.X0(I)) GO TO 190
  160 CONTINUE
C
      IF(IRUN.EQ.1 .AND. JRUN.EQ.1) GO TO 170
      IF(TFMIN.LE.FEST) FEST=0.0
C     G0=RA/(TFMIN-FEST)

        G0 = DABS(G0)
      C=G0/(RA**P)
  170 CONTINUE
      IF(JPRINT.LE.3) GO TO 192
      WRITE(6, 1080) G0, C, TFMIN, FEST
  190 CONTINUE
  192 CONTINUE
C
      IF(JPRINT.LE.1) GO TO 194
      WRITE(6, 540)
      WRITE(6, 1070) G0, C
  194 CONTINUE
C
C  EVALUATE GRADIENTS OF NONLINEAR OBJECTIVE AND/OR CONSTRAINT FUNCTIONS
C
      IFDO=0
      IFDG=0
      IF(IFD.EQ.1 .OR. IFD.GE.4) IFDO=1
      IF(IFD.GE.2              ) IFDG=1
C
C  -- ANALYTIC GRADIENTS --  (IF LOBJ.EQ.0  RE-EVALUATE DDOBJ)
C
      IF(IFDO.NE.0 .OR. LOBJ.EQ.1) GO TO 196
      IOBGRD=IOBGRD+1
      TTS=CTIME(1)
      CALL ANALYS (3,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)
      TTE=CTIME(1)
      TOBGRD=TOBGRD+TTS-TTE
  196 CONTINUE
      IF(NONLC.EQ.0 .OR. IFDG.NE.0) GO TO 198
      INLCGR=INLCGR+1
      TTS=CTIME(1)
      CALL ANALYS (4,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)
      TTE=CTIME(1)
      TNLCGR=TNLCGR+TTS-TTE
  198 CONTINUE
C
C  -- FINITE DIFFERENCE GRADIENTS --
C
      IF(IFD.EQ.0) GO TO 216
      IF(IFDG.EQ.0) GO TO 200
      ICONST=ICONST+1
      TTS=CTIME(1)
      CALL ANALYS (2,X ,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,1)
      TTE=CTIME(1)
      TCONST=TCONST+TTS-TTE
  200 IF(IFDO.EQ.0) GO TO 202
      DO 201 I=1, N3
  201 DDOBJ(I)=0.0
      IOBJCT=IOBJCT+1
      TTS=CTIME(1)
      CALL ANALYS (1,X ,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,1)
      TTE=CTIME(1)
      TOBJCT=TOBJCT+TTS-TTE
  202 CONTINUE
      DO 214 I=1, NDV
      X(I)=X0(I)+FDCV(I)
      IF(IFDG.EQ.0) GO TO 212
      ICONST=ICONST+1
      TTS=CTIME(1)
      CALL ANALYS (2,X ,OBJ,DOBJ,DDOBJ,G1,GB,DG,N1,N2,N3,N4
     *,1) ! eval constraints
      TTE=CTIME(1)
      TCONST=TCONST+TTS-TTE
      IF(NTCE.LE.0) GO TO 212
      KB=(I-1)*NTCE
      DO 210 J=1, NTCE
      K=KB+J
  210 DG(K)=(G1(J)-G(J))/FDCV(I)
  212 IF(IFDO.EQ.0) GO TO 214
      IOBJCT=IOBJCT+2
      TTS=CTIME(1)
      CALL ANALYS (1,X,OBJ1,DOBJ,DDOBJ,G1,GB,DG,N1,N2,N3,N4
     *,1) ! eval obj func
      X(I)=X0(I)-FDCV(I)
      CALL ANALYS (1,X,OBJ2,DOBJ,DDOBJ,G1,GB,DG,N1,N2,N3,N4,1)

      TTE=CTIME(1)
      TOBJCT=TOBJCT+TTS-TTE
      DOBJ(I)=(OBJ1-OBJ2)*0.5/FDCV(I)
      K=(I+1)*I/2
      DDOBJ(K)=(OBJ1+OBJ2-OBJ-OBJ)/(FDCV(I)*FDCV(I))
  214 X(I)=X0(I)
  216 CONTINUE
C
      G01=1.0/G0
      G02=1.0/(G0*G0)
      DO 280 J=1,NDV
      DH(J)=0.0

      IF(NTCE.LE.0) GO TO 221
      KB=NTCE*(J-1)
      DO 220 I=1,NTCE
      K=KB+I
C
C  FIND FIRST DERIVATIVE VECTOR
C
      IF (G(I).GE.G0) GO TO 218
      DH(J)=DH(J)+DG(K)*(2.0*G(I)*G01-3.0)*G02
      GO TO 220
  218 DH(J)=DH(J)-DG(K)/(G(I)*G(I))
  220 CONTINUE
C
  221 IC=ISIDE(J)+1
      GO TO (270,230,250,230), IC
C
C  LOWER BOUND
C
  230 H=X0(J)-BL(J)
      IF(H.GE.G0) GO TO 235
      DB= (2.0*H*G01-3.0)*G02
      GO TO 240
  235 DB=-1.0/(H*H)
  240 DH(J)=DH(J)+DB
C
      IF (IC.EQ.2) GO TO 270
C  UPPER BOUND
C
  250 H=BU(J)-X0(J)
      IF(H.GE.G0) GO TO 255
      DB=-(2.0*H*G01-3.0)*G02
      GO TO 260
  255 DB=1.0/(H*H)
  260 DH(J)=DH(J)+DB
  270 CONTINUE
C
      DH(J)=DOBJ(J)+RA*DH(J)
  280 CONTINUE

C
C  FIND THE SECOND ORDER DERIVATIVE MATRIX
C
      G03=1.0/(G0*G0*G0)
      RA2=2.0*RA
      GINF=RA2*G03
C
      IF(NTCE.EQ.0) GO TO 300
      DO 290 I=1, NTCE
      N=0
      NTCEI=I-NTCE
      GMUL=GINF
      IF(G(I).GT.G0) GMUL=RA2/(G(I)*G(I)*G(I))
      DO 290 JA=1, NDV
      KJ=JA*NTCE+NTCEI
      DO 290 IA=1, JA
      KI=IA*NTCE+NTCEI
      N=N+1
  290 DDOBJ(N)=DDOBJ(N)+GMUL*DG(KI)*DG(KJ)
  300 CONTINUE
C
      DO 350 JA=1, NDV
      N=(JA*JA+JA)/2
      IC=ISIDE(JA)+1
C
      GO TO (340, 310, 330, 310), IC
C
C  LOWER BOUND
C
  310 CONTINUE
      H=X0(JA)-BL(JA)
      IF(H.GE.G0) GO TO 315
      DDB=RA2*G03
      GO TO 316
  315 DDB=RA2/(H*H*H)
  316 DDOBJ(N)=DDOBJ(N)+DDB
c  320 IF (IC.EQ.2) GO TO 340
      IF (IC.EQ.2) GO TO 340
C
C  UPPER BOUND
C
  330 CONTINUE
      H=BU(JA)-X0(JA)
      IF(H.GE.G0) GO TO 335
      DDB=RA2*G03
      GO TO 336
  335 DDB=RA2/(H*H*H)
  336 DDOBJ(N)=DDOBJ(N)+DDB
  340 CONTINUE
C
      DDOBJ(N)=DDOBJ(N)*1.05
  350 CONTINUE
C
C  SOLVE THE EQUATIONS FOR SEARCH DIRECTION VECTOR
C
      DO 360 IX=1,NDV
      S(IX)=-DH(IX)
  360 CONTINUE
      TTS=CTIME(1)
C     The following line added by vvjdg/smsnp Dec. 1992 to avoid
C     the erroneous error flag return from SAD007.
C     (For a single design variable, steepest descent will be used).
      IF (NDV .EQ. 1) GO TO 420
      CALL SAD007(NDV, DDOBJ, IIK, NER, N3, N1)
      IF (NER.EQ.0) GO TO 370
      IF (JPRINT.LE.1) GO TO 420
      WRITE(6, 1030)
      GO TO 420
  370 CALL SAD008( NDV, 1, DDOBJ, S, IIK, N3, N1, N1)
      TTE=CTIME(1)
      TEQSOL=TEQSOL+TTS-TTE
C
C  NORMALIZE DIRECTION VECTOR
C
      JFLAG=0
crmc  380 SM=0.0
      SM=0.0
      DO 390 IN=1,NDV
      SM=SM+S(IN)*S(IN)
  390 CONTINUE
      IF (SM.LE.1E-14) GO TO 445
      SM=DSQRT(SM)
      A=1.0/SM
      DO 400 JN=1,NDV
      SN(JN)=S(JN)*A
  400 CONTINUE
C
C  TEST FOR NEGATIVE SLOPE
C
C1    WRITE(6,*) 'DH VECTOR ',(L,DH(L),L=1,NDV)
C1    WRITE(6,*) 'SN VECTOR ',(L,SN(L),L=1,NDV)
      DF0=0.0
      DO 410 I=1,NDV
      DF0=DF0+DH(I)*SN(I)
  410 CONTINUE
      IF (DF0.LT.0.0) GO TO 450
C
C  STEEPEST DECENT METHOD
C
  420 DF0=0.0
      DO 430 J=1,NDV
      DF0=DF0+DH(J)*DH(J)
  430 CONTINUE
      DF0=-DSQRT(DF0)
      DO 440 I=1,NDV
  440 SN(I)=DH(I)/DF0
      SM=0.2*OBJ/DF0
      JFLAG=1
      GO TO 460
C
  445 NFLAG=1
      IF (JPRINT.LE.1) GO TO 470
      WRITE (6,640)
      GO TO 470
C
  450 CONTINUE
      IF (JPRINT.LE.1) GO TO 470
      WRITE(6, 1000)
      GO TO 470
C
  460 CONTINUE
      IF (JPRINT.LE.1) GO TO 470
      WRITE(6, 1010)
      GO TO 470
C
  470 IF (JPRINT.LE.1) GO TO 480
      WRITE(6, 1020) DF0
      WRITE(6, 1040) (SN(I), I=1, NDV)
C  480 IF (JPRINT.GE.0) GO TO 485 Changed by Herb Schilling
  480 IF (JPRINT.GE.-1) GO TO 485
      WRITE (6,1060) RA
      CALL PRINTD (X0,X,SN,OBJ3,G,DG,DOBJ,DDOBJ,F3,BU,BL,ISIDE
     1     ,1,0,1,0,0,0,0,0,0,0, N1,N2,N3,N4)
C
C  PROJECTION OF CONSTRAINT GRADIENTS ONTO NORMALIZED DIRECTION VECTOR.
C
  485 CONTINUE
      IF(NTCE.LE.0) GO TO 530
      DO 510 I=1, NTCE
      G1(I)=G(I)
      PROJ=0.0
      KB=I-NTCE
      DO 500 J=1, NDV
      K=J*NTCE+KB
  500 PROJ=PROJ+DG(K)*SN(J)
      G2(I)=PROJ
  510 CONTINUE
C
      IF(JPRINT.LE.4) GO TO 530
      WRITE(6,1090)
      WRITE(6,1040) (G1(I),I=1,NTCE)
      WRITE(6,1100)
      WRITE(6,1040) (G2(I),I=1,NTCE)
C
  530 RETURN
C
  540 FORMAT(/1X,5(1H-),19H DIRECTION FINDING ,5(1H-))
  640 FORMAT (/10X,63HFURTHUR MODIFICATION OF THE CURRENT DESIGN IS FOUN
     1D UNNECESSARY  )
 1000 FORMAT(/10X,46HDIRECTION COMPUTED BY MODIFIED NEWTON'S METHOD)
 1010 FORMAT(/10X,44HDIRECTION COMPUTED BY STEEPEST DECENT METHOD )
 1020 FORMAT( 10X,7HSLOPE =,1P,E12.4,/10X,
     1   27HNORMALIZED DIRECTION VECTOR )
 1030 FORMAT (//10X,50HDDOBJ MATRIX IS SINGULAR, STEEPEST DESCENT IS USE
     *D  )
 1040 FORMAT(10X,1P,10E12.4)
 1060 FORMAT(/10X,17HRESPONSE FACTOR = , 1P,E12.4 )
 1070 FORMAT( 10X,18HTRANSITION POINT =,1P,E15.6,5X
     *    ,45HCOEFFICIENT OF TRANSITION POINT CALCULATION =,E15.6)
 1080 FORMAT(15X,29HTRANSITION POINT UPDATED G0 =, 1P,E15.6,5X
     *    ,3HC =,E15.6, 5X,6HFMIN =,E15.6, 3X,6HFEST =,E15.6)
 1090 FORMAT(10X, 21HCONSTRAINT BASE VALUE )
 1100 FORMAT(10X, 21HCONSTRAINT PROJECTION )
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(FUNCTN$)  <<=====
 
 
      SUBROUTINE FUNCTN (ANALYS, KOBJ, KCON
     *   , AL    , BL    , BU    , DDOBJ , DG    , DOBJ  , FTN
     *   , G     , GB    , G1    , G2    , G3    , OBJ   , OBJB
     *   , SN    , X     , X0
     *   , ILIN  , ISIDE , N1    , N2    , N3    , N4)
C
C * * PROGRAM NO.
C * * PROGRAMMER   L. CHENG AND H.MIURA
C * * ARGUMENT LIST
C       ANALYS : SUBROUTINE NAME OF THE USER'S ANALYSIS PROGRAM.
C       KOBJ   : =0 DO NOT EVALUATE OBJECTIVE FUNCTION
C                =1 EVALUATE OBJECTIVE FUNCTION
C       KCON   : =0 DO NOTHING ON CONSTRAINT FUNCTIONS
C                =1 LINEAR APPROXIMATION
C                =2 QUADRATIC APPROXIMATION
C                =3 COMPLETE EVALUATION (ANALYTIC GRADIENT)
C                =4 COMPLETE EVALUATION (FINITE DIFFERENCE GRADIENT)
C                =5 RECIPROCAL APPROXIMATION
C       FTN    : TOTAL FUNCTION VALUE. (OBJECTIVE + PENALTY)
C       OBJ    : OBJECTIVE FUNCTION VALUE.
C       DOBJ   : GRADIENT OF THE OBJECTIVE FUNCTION.
C       DDOBJ  : SECOND ORDER DERIVATIVE MATRIX OF THE OBJECTIVE.
C       X      : CURRENT DESIGN VARIABLE VECTOR.
C       X0     : DESIGN VARIABLE VECTOR AT THE STARTING POINT OF ODM.
C       G      : CURRENT CONSTRAINT VALUES.
C       GB     : CONSTRAINT VALUES AT THE INITIAL POINT OF ODM.
C       DG     : GRADIENT MATRIX OF THE CONSTRAINT FUNCTIONS.
C       SN     : NORMALIZED DIRECTION VECTOR.
C       AL     : MOVE DISTANCE.  X = X0 + AL*SN
C       BU     : UPPER BOUND VECTOR.
C       BL     : LOWER BOUND VECTOR.
C       ISIDE  : SIDE CONSTRAINT CODE
C                  0  - NO SIDE CONSTRAINT
C                  1  - LOWER BOUND ONLY.
C                  2  - UPPER BOUND ONLY.
C                  3  - BOTH UPPER AND LOWER BOUNDS.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)

cvvjdg - linux:  One line added below...
      External CTIME

      EXTERNAL ANALYS
      DIMENSION     BL(N1)  , BU(N1)  ,DDOBJ(N3), DG(N4)
     *  , DOBJ(N1), G(N2)   , GB(N2)  , G1(N2)  , G2(N2)  , G3(N2)
     *  , SN(N1)  , X(N1)   , X0(N1)
     *  , ILIN(N2),ISIDE(N1)
      COMMON/CONTRL/C     , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
      COMMON/COUNTR/IOBJCT, IOBAPR, IOBGRD, ICONST, ICONGR, INLCGR
     *    , ICGAPR
      COMMON/OPTIME/TTOTAL, TODM  , TDIRCN, TOBJCT, TOBAPR, TOBGRD
     *    , TCONST, TCONGR, TNLCGR, TCOAPR, TEQSOL
C
      IF(KOBJ.EQ.0 .AND. KCON.EQ.0) GO TO 100
C
C  UPDATE DESIGN VECTOR
C
      DO 40 I=1, NDV
   40 X(I)=X0(I)+AL*SN(I)
C
C  UPDATE OBJECTIVE AND CONSTRAINT FUNCTIONS
C
      IF(KOBJ.EQ.0) GO TO 50
      IF(LOBJ.EQ.1) GO TO 44
      IOBJCT=IOBJCT+1
      TTS=CTIME(1)
      CALL ANALYS(1, X, OBJ, DOBJ, DDOBJ, G, GB, DG, N1,N2,N3,N4,0)



      TTE=CTIME(1)
      TOBJCT=TOBJCT+TTS-TTE
      GO TO 50
   44 OBJ=OBJB
      TTS=CTIME(1)
      IOBAPR=IOBAPR+1
      DO 46 J=1, NDV
   46 OBJ=OBJ+DOBJ(J)*(X(J)-X0(J))
      TTE=CTIME(1)
      TOBAPR=TOBAPR+TTS-TTE
   50 CONTINUE
C
      KK=KCON+1
      IF (NTCE .LE. 0) GO TO 100
      GO TO (100, 60, 70, 80, 80, 90), KK
   60 ICGAPR=ICGAPR+1
      TTS=CTIME(1)
      DO 62 I=1, NTCE
   62 G(I)=G1(I)+AL*G2(I)
crmc   64 CONTINUE
      CONTINUE
      TTE=CTIME(1)
      TCOAPR=TCOAPR+TTS-TTE
      GO TO 100
   70 ICGAPR=ICGAPR+1
      TTS=CTIME(1)
      DO 74 I=1, NTCE
      IF(ILIN(I).EQ.1) GO TO 72
      G(I)=G1(I)+AL*(G2(I)+AL*G3(I))
      GO TO 74
   72 G(I)=G1(I)+AL*G2(I)
   74 CONTINUE
crmc   76 CONTINUE
      CONTINUE
      TTE=CTIME(1)
      TCOAPR=TCOAPR+TTS-TTE
      GO TO 100
   80 ICONST=ICONST+1
      TTS=CTIME(1)
      CALL ANALYS(2, X, OBJ, DOBJ, DDOBJ, G, GB, DG, N1,N2,N3,N4,0)
      TTE=CTIME(1)
      TCONST=TCONST+TTS-TTE
      DO 82 I=1, NTCE
      IF(ILIN(I).NE.1) GO TO 82
      G(I)=G1(I)+AL*G2(I)
   82 CONTINUE
crmc   84 CONTINUE
      CONTINUE
      GO TO 100
   90 ICGAPR=ICGAPR+1
      TTS=CTIME(1)
C
C  PROJECTION OF CONSTRAINT GRADIENTS ONTO NORMALIZED DIRECTION VECTOR.
C
      DO 96 I=1, NTCE
      IF(ILIN(I).EQ.1) GO TO 94
      PROJ=0.0
      KB=I-NTCE
      DO 92 J=1, NDV
      K=J*NTCE+KB
      IF(X(J).LE.0.000001) GO TO 94
   92 PROJ=PROJ+DG(K)*SN(J)*X0(J)/X(J)
      G(I)=G1(I)+AL*PROJ
      GO TO 96
   94 G(I)=G1(I)+AL*G2(I)
   96 CONTINUE
      TTE=CTIME(1)
      TCOAPR=TCOAPR+TTS-TTE
  100 CONTINUE
C
      IF(JPRINT.LE.5) GO TO 104
      WRITE(6,1000)
      DO 102 I=1,NTCE
  102 WRITE(6,1010) G(I), G1(I), G2(I), G3(I)
  104 CONTINUE
C
C  COMPUTE THE TOTAL FUNCTION
C
      SUM1=0.0
      SUM2=0.0
      G01=1.0/G0
      G02=1.0/(G0*G0)
      G03=1.0/(G0*G0*G0)
      DO 170 I=1,NDV
      IC=ISIDE(I)+1
      GO TO (170,110,140,110), IC
C
C  LOWER BOUND
C
  110 H=X(I)-BL(I)
      IF (H.GE.G0) GO TO 120
      B=H*H*G03-3.0*H*G02+3.0*G01
      GO TO 130
  120 B=1.0/H
  130 SUM1=SUM1+B
      IF (IC.EQ.2) GO TO 170
C
C  UPPER BOUND
C
  140 H=BU(I)-X(I)
      IF (H.GE.G0) GO TO 150
      B=H*H*G03-3.0*H*G02+3.0*G01
      GO TO 160
  150 B=1.0/H
  160 SUM1=SUM1+B
  170 CONTINUE
      IF(NTCE.EQ.0) GO TO 200
      DO 190 J=1,NTCE
      IF (G(J).LT.G0) GO TO 180
      SUM1=SUM1+1.0/G(J)
      GO TO 190
  180 SUM2=SUM2+((G(J)*G01-3.0)*G(J)*G01+3.0)*G01
  190 CONTINUE
  200 SUM1=SUM1+SUM2
C
C  FIND TOTAL FUNCTION
C
crmc  210 FTN=OBJ+RA*SUM1
      FTN=OBJ+RA*SUM1
      IFTN=IFTN+1
      RETURN
 1000 FORMAT(/10X, 13HG, G1, G2, G3 )
 1010 FORMAT(10X,1P,4E12.4)
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(NEWSUM$)  <<=====
 
 
      SUBROUTINE newsuminterruptible(ANALYS
     *    ,BL    , BU    ,         DDOBJ , DG    , DH    , DOBJ
     *    ,FDCV  , FMIN  , G     , GB    , G1    , G2    , G3
     *    ,OBJ   , OBJMIN, S     , SN    , X     , X0
     *    ,IIK   , ILIN  , ISIDE , N1    , N2    , N3    , N4
     *    ,isdone, resume )
C     ******************************************************************
C     **                                                              **
C     **                        NEWSUMT                               **
C     **                                                              **
C     **                      26 MAY 1982                             **
C     **                                                              **
C     **     MODIFIED FOR RECIPROCAL APPROXIMATIONS   16 SEP 1982     **
C     **                                                              **
C     ******************************************************************
C
C
C * * PROGRAM NO.  LC0001P
C * * PROGRAMMER   L. CHENG,  H. MIURA
C * * PRIMARY SUBROUTINE OF THE NEWSUMT OPTIMIZER.  ORGANIZE THE
C     ENTIRE OPTIMIZATION PROCEDURE AND RETURN THE CONTROL TO THE
C     USER MAIN PROGRAM UPON COMPLETION.
C * * ARGUMENT LIST
C       BL     : LOWER BOUND -SIDE CONSTRAINTS
C       BU     : UPPER BOUND -SIDE CONSTRAINTS
C       DDOBJ  : HESSIAN MATRIX FOR THE OBJECTIVE FUNCTION
C       DG     : GRADIENT OF CONSTRAINTS
C       DH     : GRADIENT OF THE TOTAL FUNCTION
C       DOBJ   : GRADIENT OF THE OBJECTIVE FUNCTION
C       FDCH   :
C       FMIN   :
C       G      : CURRENT CONSTRAINT FUNCTION VALUES
C       GB     : CONSTRAINTS EVALUATED AT THE BASE DESIGN (X0)
C       G1     :
C       G2     :
C       G3     :
C       OBJ    : CURRENT OBJECTIVE FUNCTION
C       OBJMIN : MINIMUM VALUE OF THE OBJECTIVE FUNCTION
C       S      : DIRECTION VECTOR BEFORE NORMALIZING
C       SN     : NORMALIZED DIRECTION VECTOR
C       X      : CURRENT DESIGN VECTOR
C       X0     : BASE DESIGN
C       IIK    : POSITION OF THE DIAGONAL ELEMENTS OF THE HESSIAN MATRIX
C       ILIN   : IDENTIFICATION OF LINEAR CONSTRAINTS
C       ISIDE  : SIDE CONSTRAINT IDENTIFICATION CODE VECTOR
C       N1     : NUMBER OF DESIGN VARIABLES
C       N2     : NUMBER OF CONSTRAINTS
C       N3     : (N1+1)*N1/2
C       N4     : N1*N2
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)


CCCCC  Added to make it interruptible 
      Logical isdone, resume
CCCCC

CCCCC Removed temp storage arrays because they are not needed
CCCCC in OpenMDAO. Added parameter IMODE to tell ANALYS if we
CCCCC are running a finite difference calculation.


cvvjdg - linux:  One line added below...
      External CTIME

      EXTERNAL ANALYS
      DIMENSION     BL(N1)  , BU(N1)  ,           DDOBJ(N3), DG(N4)
     *  , DH(N1)  , DOBJ(N1),           FDCV(N1), G(N2)    , GB(N2)
     *  , G1(N2)  , G2(N2)  , G3(N2)  , S(N1)   , SN(N1)   , X(N1)
     *  , X0(N1)
     *  , IIK(N1) , ILIN(N2), ISIDE(N1)
     *  , II(7)
      COMMON/CONTRL/C     , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
      COMMON/COUNTR/IOBJCT, IOBAPR, IOBGRD, ICONST, ICONGR, INLCGR
     *    , ICGAPR
      COMMON/OPTIME/TTOTAL, TODM  , TDIRCN, TOBJCT, TOBAPR, TOBGRD
     *    , TCONST, TCONGR, TNLCGR, TCOAPR, TEQSOL
C  THE FOLLOWING CARD IS REQUIRED ONLY FOR ACCESS-2 APPLICATION.
      COMMON/TRANSD/TFMIN,RA1,OB1, IX,NTCER

      ! II is already saved in the common block COUNTR. It is 
      !    equivalenced to the items in that common block
      common/save_across_calls/OBJ0, OBJ1,OBJ2,OBJB,
     *       PHI0, PHI1, PHI2, 
     *       TTS, TTE, T1, TTS2, TTE2, TTS3, TTE3,
     *       TTSM,
     *       AMIN,FTIMH,FTIM,
     *       FEST, IRUN,IODM, JRUN, IOBJJJ
      save /save_across_calls/, /OPTIME/, /COUNTR/, /INTERN/, /CONTRL/,
     *       /TRANSD/



Cf2py intent(in) ANALYS
Cf2py intent(in) BL
Cf2py intent(in) BU
Cf2py intent(out) DDOBJ
Cf2py intent(out) DG
Cf2py intent(out) DH
Cf2py intent(out) DOBJ
Cf2py intent(out) FDCV
Cf2py intent(out) FMIN
Cf2py intent(out) G
Cf2py intent(out) GB
Cf2py intent(out) G1
Cf2py intent(out) G2
Cf2py intent(out) G3
Cf2py intent(out) OBJ
Cf2py intent(out) OBJMIN
Cf2py intent(out) S
Cf2py intent(out) SN
Cf2py intent(out) X
Cf2py intent(in) X0
Cf2py intent(out) IIK
Cf2py intent(in) ILIN
Cf2py intent(in) ISIDE
Cf2py intent(in) N1
Cf2py intent(in) N2
Cf2py intent(in) N3
Cf2py intent(in) N4
Cf2py intent(in) IMODE
      EQUIVALENCE (IOBJCT, II(1))
C       C      : TRANSITION POINT COEFFICIENT
C       EPSGSN : GOLDEN SECTION CONVERGENCE CRITERION
C       EPSODM : CONVERGENCE CRITERION OF ONE DIMENSIONAL MINIMIZATION
C       EPSRSF : RESPONSE SURFACE CONVERGENCE CRITERION
C       FDCH   :
C       G0     : TRANSITION POINT OF THE EXTENDED PENALTY FUNCTION
C       P      : TRANSITION POINT POWER COEFFICIENT
C       RACURR : CURRENT PENALTY MULTIPLIER
C       RACUT  : PENALTY MULTIPLIER CUT RATIO
C       RAMIN  : MINIMUM VALUE OF PENALTI MULTIPLIE
C       SM     :
C       STEPMX : MAXIMUM ALLOWABLE STEPSIZE
C       TFTN   :
C       MAXODM : MAXIMUM ALLOWABLE NUMBER OF ONE DIMENSIONAL MINIMIZATIO
C       NTCE   : NUMBER OF CONSTRAINTS
C       NDV    : NUMBER OF DESIGN VARIABLES
C       NONLC  : NUMBER OF NON-LINEAR CONSTRAINTS
C
C

      if ( resume ) then
        goto 1001
      end if


      TTS1=CTIME(1)
C
C  ASSIGN THE DIAGONAL POINTER VECTOR 'IIK'.
C
      DO 10 I=1, NDV
10    IIK(I)=((I+1)*I)/2
C
C  FINITE DIFFERENCE STEP SIZE DEFAULT
C
      IF(IFD.EQ.0) GO TO 50
      IF(IFD.LT.0) GO TO 30
      DO 20 I=1, NDV
20    FDCV(I)=0.01
      GO TO 50
30    DO 40 I=1, NDV
      IF(DABS(FDCV(I)).GT.0.1E-7) GO TO 40
      WRITE(6, 1060) I, FDCV(I)
      STOP
40    CONTINUE
50    CONTINUE


      IFD=IABS(IFD)
C
C  ASSIGN CONSTANTS
C
      IODM=0
      OBJ0=1E20
      OBJ1=0.0
      OBJ2=0.0
      OBJMIN=0.0
      FEST=0.0
      IRUN = 0
      DO 60 I=1, 7
60    II(I)=0

C
C  ANALYSIS OF THE INITIAL DESIGN.
C
      IOBJCT=IOBJCT+1
      TTS=CTIME(1)

      CALL ANALYS (1,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)

      TTE=CTIME(1)
      TOBJCT=TOBJCT+TTS-TTE
      OBJB=OBJ
      IF(NTCE.EQ.0) GO TO 70
      ICONST=ICONST+1
      TTS=CTIME(1)
      CALL ANALYS (2,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)
      TTE=CTIME(1)
      TCONST=TCONST+TTS-TTE
70    CONTINUE

C
C  CHECK THE EXISTANCE OF NON-LINEAR CONSTRAINTS
C
      NONLC=0
      IF(NTCE.EQ.0) GO TO 81
      DO 80 I=1, NTCE
80    IF(ILIN(I).NE.1) NONLC=NONLC+1
81    CONTINUE

C
C  EVALUATE GRADIENT OF LINEAR OBJECTIVE AND/OR LINEAR CONSTRAINTS
C
      IF(NTCE.EQ.NONLC) GO TO 82
      ICONGR=ICONGR+1
      TTS=CTIME(1)
      CALL ANALYS (5,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)
      TTE=CTIME(1)
      TCONGR=TCONGR+TTS-TTE
82    CONTINUE
      DO 84 I=1, N3
      DDOBJ(I)=0.0
84    CONTINUE
      IF(LOBJ.NE.1) GO TO 86
      IOBGRD=IOBGRD+1
      TTS=CTIME(1)
      CALL ANALYS (3,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)
      TTE=CTIME(1)
      TOBGRD=TOBGRD+TTS-TTE
86    CONTINUE
C
      DO 90 I=1,NDV
      IF (ISIDE(I).NE.3) GO TO 90
      IF (BU(I).GE.BL(I)) GO TO 90
      WRITE (6,330) I
      RETURN
90    CONTINUE
      IF(JPRINT.LT.0) GO TO 100
      WRITE(6,1000)



      WRITE(6, 1010) G0,P,C,EPSGSN,EPSODM,EPSRSF,RACUT,RAMIN,STEPMX
     *    ,MAXGSN, MAXODM, MAXRSF, JPRINT, IFD, IFLAPP, NDV, NTCE
      CALL PRINTD(X0,X,SN,OBJ,G,DG,DOBJ,DDOBJ,FTN,BU,BL,ISIDE
     *    , 1,0,0,1,1,0,0,0,0,1, N1,N2,N3,N4)
C
C  DETERMINE INITIAL VALUE OF THE RESPONSE FACTOR
C
100   IF(MFLAG.NE.0) GO TO 105


      CALL RFACTR (ANALYS,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,ISIDE,BU,BL,
     1 X,SN,N1,N2,N3,N4)

      DO 102 LK = 1, NDV
102   X(LK) = X0(LK)
105   C=G0/(RA**P)
C
C  RESPONSE SURFACE LOOP
C
110   CONTINUE
      JRUN=0




      T1=CTIME(1)
      IRUN=IRUN+1
      G0=C*(RA**P)
      G0 = DABS(G0)
      IF(JPRINT .LT. 0) GO TO 112
C               TYPE 640, (X(LK), LK =1, NDV)
C               TYPE 632, IRUN, RA
      WRITE(6,630) IRUN, RA
112   CONTINUE
C
      PHI0=1E20
      PHI1=0.0
      PHI2=0.0
C
C  ONE DIMENSIONAL MINIMIZATION LOOP
C
120   CONTINUE
      JRUN=JRUN+1

C

      TTS2=CTIME(1)
      CALL DIRCTN (ANALYS
     *  , BL    , BU    ,         DDOBJ , DF0   , DG    , DH    , DOBJ
     *          , FDCV  , FEST  , G     , GB    , G1    , G2
     *  , G3    , OBJ   , OBJMIN, S     , SN    , TFMIN , X     , X0
     *  , IIK   , ILIN  , IRUN  , ISIDE , JRUN  , N1    , N2
     *  , N3    , N4)


      TTE2=CTIME(1)
      TDIRCN=TDIRCN+TTS2-TTE2
      IF (NFLAG.EQ.1) GO TO 210
C
      IF(JPRINT.LE.1) GO TO 124
      WRITE (6,600) JRUN
124   CONTINUE
      TTS3=CTIME(1)
      CALL ODM (ANALYS
     *  , AMIN  , BL    , BU    , DDOBJ , DF0   , DG    , DOBJ
     *  , TFMIN , G     , G1    , G2    , G3    , GB    , OBJ   , OBJB
     *  , OBJMIN,         SN    , X     , X0
     *  , ILIN  , ISIDE , N1    , N2    , N3    , N4)


      TTE3=CTIME(1)
      TODM=TODM+TTS3-TTE3
C
C  CONVERGENCE TEST IN THIS RESPONSE SURFACE
C
      IODM=IODM+1
      IF(JPRINT .LT. 0) GO TO 126
      WRITE(6, 1080) JRUN, TFMIN, OBJMIN, AMIN
C               TYPE 1082, JRUN, TFMIN, OBJMIN, AMIN
126   CONTINUE


CCCCC  Added to make it interruptible 
      isdone = .False.
      resume = .True.


      return

1001  continue  ! Where the routine will resume
CCCCC  
      



      IF(JRUN.GE.MAXODM) GO TO 180
      IF(DABS(AMIN).LE.0.0) GO TO 182
      IF (IFLAG.EQ.1) GO TO 150
      PHI2=PHI1
      PHI1=PHI0
      PHI0=TFMIN
      CHECK1=PHI2/PHI1-1.0
      CHECK2=PHI1/PHI0-1.0
      FTIMH=CTIME(1)
      FTIM=TTS1-FTIMH
      IOBJJJ=IOBJCT+IOBAPR
      IF (DABS(CHECK1).GT.EPSODM) GO TO 130
      IF (DABS(CHECK2).GT.EPSODM) GO TO 130
      IF (JPRINT.LE.1) GO TO 150
      WRITE (6,290) CHECK1,CHECK2,EPSODM,PHI2,PHI1,PHI0,
     1 IOBJJJ,IOBGRD,ICONST,ICONGR,INLCGR,ICGAPR,FTIM
      GO TO 150
130   IF (JPRINT.LE.1) GO TO 140
      WRITE (6,300) CHECK1,CHECK2,EPSODM,PHI2,PHI1,PHI0,
     1 IOBJJJ,IOBGRD,ICONST,ICONGR,INLCGR,ICGAPR,FTIM
140   GO TO 120
C
C  EXTRAPORATION OF OBJECTIVE FUNCTION W.R.T. RA.
C
150   CONTINUE
      IF(IRUN.LE.1) GO TO 152
      RT1=DSQRT(RA1)
      RT2=DSQRT(RA)
      V=(OB1-OBJMIN)/(RT1-RT2)
      FEST=OBJMIN-V*RT2
      IF(JPRINT.LE.3) GO TO 152
      WRITE(6, 1040) FEST, OB1, OBJMIN
152   CONTINUE
C
      TTSM=TTS1-CTIME(1)

C     skipping over added by Herb Schilling 10/8/2010
      IF (JPRINT.LT.0) GO TO 153
      WRITE (20,1100) IRUN,NDV,TTSM,OBJ,TFMIN,(X(IIOO),IIOO=1,NDV)
 153  continue

      IF(JPRINT.LE.0) GO TO 154
      WRITE(6,1070)
      CALL PRINTD(X0,X,SN,OBJ,G,DG,DOBJ,DDOBJ,TFMIN,BU,BL,ISIDE
     *     ,1,0,0,1,1,0,0,0,1,1, N1,N2,N3,N4)
C     CALL ANALYS (7,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,N1,N2,N3,N4,0)
154   CONTINUE
      RA1=RA
      OB1=OBJMIN

C     skipping over added by Herb Schilling 10/8/2010
      IF (JPRINT.LT.0) GO TO 155 
      WRITE (9,1120) IRUN, RA, TFMIN,OBJMIN
 155  continue

C
C  CUT RESPONSE FACTOR AND CONVERGENCE TEST AMONG RESPONSE SURFACES
C
      RA=RA*RACUT
      IF (DABS(RA).LE.RAMIN) GO TO 190
      IF (IRUN.GE.MAXRSF) GO TO 200
      OBJ2=OBJ1
      OBJ1=OBJ0
      OBJ0=OBJMIN
      CHECK3=OBJ2/OBJ1-1.0
      CHECK4=OBJ1/OBJ0-1.0
      T5=CTIME(1)
      TRA=T1-T5
      IF (DABS(CHECK3).GT.EPSRSF) GO TO 160
      IF (DABS(CHECK4).GT.EPSRSF) GO TO 160
      IF (JPRINT.LE.1) GO TO 210
      WRITE (6,310) CHECK3,CHECK4,EPSRSF,OBJ2,OBJ1,OBJ0,TRA
      GO TO 170
160   IF (JPRINT.LE.1) GO TO 110
      WRITE (6,320) CHECK3,CHECK4,EPSRSF,OBJ2,OBJ1,OBJ0,TRA
      GO TO 110
170   WRITE (6,220)
      GO TO 210
180   IF (JPRINT.LE.1) GO TO 150
      WRITE (6,260)
      GO TO 150
182   IF(JPRINT.LE.1) GO TO 150
      WRITE(6, 270)
      GO TO 150
190   IF (JPRINT.EQ.0) GO TO 210
      WRITE (6,230) RA
      GO TO 210
200   IF (JPRINT.EQ.0) GO TO 210
      WRITE (6,240)
210   CONTINUE
      TTE1=CTIME(1)
      TTOTAL=TTOTAL+TTS1-TTE1
      IF (JPRINT.LT.0) GO TO 215
      WRITE(6,1020)
      CALL PRINTD(X0,X,SN,OBJMIN,G,DG,DOBJ,DDOBJ,TFMIN,BU,BL,ISIDE
     1    ,0,1,0,1,1,0,0,0,1,1, N1,N2,N3,N4)
      IOBJCT = IOBJCT + IOBAPR
      TOBJCT = TOBJCT + TOBAPR
      WRITE(6, 1030) IRUN,TTOTAL,IODM,TODM,TDIRCN,TEQSOL
      WRITE(6, 1050) IOBJCT, TOBJCT,  IOBGRD,TOBGRD
     *    ,ICONST,TCONST,ICONGR,TCONGR,INLCGR,TNLCGR,ICGAPR,TCOAPR





CCCCC  Added to make it interruptible also move label
CCCCC    215 to here from return statement
215   resume = .False.
      isdone = .True.
CCCCC  


      RETURN
C
220   FORMAT (//10X,40HDOUBLE CONVERGENCE CRITERIA IS SATISFIED)
230   FORMAT (//10X,68HTHE RESPONSE FACTOR IS REDUCED TO SMALLER THAN TH
     1E SET MINIMUM VALUE,1P,E15.5)
240   FORMAT(//10X, 45HTHE NUMBER OF RSF-RUN EXCEEDS THE SET MAXIMUM)
260   FORMAT (//10X,45HTHE NUMBER OF ODM-RUN EXCEEDS THE SET MAXIMUM)
270   FORMAT(//10X, 19HNO CHANGE IN DESIGN  )
290   FORMAT (//10X,19HCONVERGED - CHECK1=,1P,E12.4,2X,
     17HCHECK2=,E12.4,2X,7HEPSODM=,E12.4,5X,3E12.4/
     215X,7HIOBJCT=,I5,2X,7HIOBGRD=,I5,2X,7HICONST=,I5,2X,7HICONGR=,I5,
     32X,7HINLCGR=,I5,2X,7HICGAPR=,I5,2X,8HTIME(S)=,0PF10.3)
300   FORMAT (//10X,23HNOT CONVERGED - CHECK1=,1P,E12.4,2X,
     17HCHECK2=,E12.4,2X,7HEPSODM=,E12.4,5X,3E12.4/
     215X,7HIOBJCT=,I5,2X,7HIOBGRD=,I5,2X,7HICONST=,I5,2X,7HICONGR=,I5,
     32X,7HINLCGR=,I5,2X,7HICGAPR=,I5,2X,8HTIME(S)=,0PF10.3)
310   FORMAT (//10X,19HCONVERGED - CHECK3=,1P,E12.4,2X,
     17HCHECK4=,E12.4,2X,7HEPSRSF=,E12.4,5X,3E12.4/
     225X,'TIME FOR THIS RESPONSE SURFACE STEP (SEC) =',0PF10.2)
320   FORMAT (//10X,23HNOT CONVERGED - CHECK3=,1P,E12.4,2X,
     17HCHECK4=,E12.4,2X,7HEPSRSF=,E12.4,5X,3E12.4/
     225X,'TIME FOR THIS RESPONSE SURFACE STEP (SEC) =',0PF10.2)
330   FORMAT(/10X, 97HCONTRADICTION -- VALUE OF UPPER BOUND IS LESS THAN
     * THAT OF LOWER BOUND FOR DESIGN VARIABLE NUMBER , I4)
600   FORMAT(/1X,5(1H-),38H ONE DIMENSIONAL MINIMIZATION RUN NO. ,I3,
     1 1X,5(1H-))
630   FORMAT (1H1,41(1H-),//39H  OPTIMIZATION OF RESPONSE SURFACE NO. ,
     *  I2, 5X, 20HPENALTY MULTIPLIER =, 1P,E15.6//1X,41(1H-))
c632   FORMAT(//2X,'RESPONSE SURFACE NO. =', I3, 3X,
c     *     'PENALTY MULTIPLIER = ', 1P,E15.6/2X, 25(1H-) )
c640   FORMAT(/2X, 16HDESIGN VARIABLES , 5(/5X, 1P,5E12.4))
1000  FORMAT(1H1,46(1H*),3X,33HN E W S U M T   O P T I M I Z E R
     *    , 3X, 46(1H*))
1010  FORMAT(//54X,18HCONTROL PARAMETERS    /
     1, /28X,47HINITIAL TRANSITION POINT . . . . . . . . . G0 =,1P,E12.4
     2, /28X,47HTRANSITION POINT EXPONENT  . . . . . . . .  P =,E12.4
     3, /28X,47HINITIAL TRANSITION POINT COEFFICIENT . . .  C =,E12.4
     *, /28X,47HGOLDEN SECTION CONVERGENCE . . . . . . EPSGSN =,E12.4
     4, /28X,47HUNCONSTRAINED MINIMIZATION CONVERGENCE EPSODM =,E12.4
     *, /28X,47HCONVERGENCE AMONG RESPONSE SURFACES  . EPSRSF =,E12.4
     6, /28X,47HRESPONSE FACTOR REDUCTION  RATIO . . .  RACUT =,E12.4
     7, /28X,47HMINIMUM ALLOWABLE RESPONSE FACTOR  . . IRAMIN =,E12.4
     *, /28X,47HMAXIMUM ALLOWABLE STEP SIZE  . . . . . STEPMX =,E12.4
     8, /28X,47HMAXIMUM ALLOWABLE GOLDEN SECTIONS  . . MAXGSN =,I5
     8, /28X,47HMAXIMUM NUMBER OF ODM PER SURFACE  . . MAXODM =,I5
     9, /28X,47HMAXIMUM ALLOWABLE RESPONSE SURFACES  . MAXRSF =,I5
     *, /28X,47HPRINTOUT CONTROL . . . . . . . . . . . JPRINT =,I5
     *, /28X,47HFINITE DIFFERENCE GRADIENT CONTROL . . .  IFD =,I5
     *, /28X,47HAPPROXIMATION CONTROL FLAG . . . . . . IFLAPP =,I5
     1      ///54X,18HSYSTEM PARAMETERS  /
     2, /28X,47HNUMBER OF DESIGN VARIABLES . . . . . . .  NDV =,I5
     3, /28X,47HNUMBER OF EFFECTIVE CONSTRAINTS  . . . . NTCE =,I5
     *,///5X,31HINITIAL DESIGN ANALYSIS SUMMARY /5X,31(1H-))
1020  FORMAT(/5X,29HFINAL RESULTS OF OPTIMIZATION /5X,29(1H-))
1030  FORMAT(/10X,16HFINAL STATISTICS ,60X,19HCUMULATIVE CPU(SEC)
     *     /10X, 16(1H-)
     *  /15X,34HNUMBER OF RESPONSE SURFACE . . . . , I5
     *    ,20X,5HTOTAL,5X,F19.4
     *  /15X,34HNUMBER OF ONE DIMENSIONAL SEARCH . , I5
     *    ,20X,6HO.D.M.,4X,F19.4
     *  /15X,18HNUMBER OF ANALYSES ,41X,10HDIRECTION , F19.4
     *  /74X,10HEQ. SOLVER , F19.4)
1040  FORMAT(10X, 5HFEST=,1P,E15.6, 3X,4HOB1=,E15.6, 3X,7HOBJMIN=,E15.6)
1050  FORMAT(20X,44HOBJECTIVE FUNCTION . . . . . . . . . . . . . , I5
     *    ,15X,F19.4
     *  /20X,44HGRADIENT OF OBJECTIVE FUNCTION . . . . . . . , I5
     *    ,15X,F19.4
     *  /20X,44HCONSTRAINT FUNCTIONS . . . . . . . . . . . . , I5
     *    ,15X,F19.4
     *  /20X,44HGRADIENT OF LINEAR CONSTRAINT FUNCTIONS  . . , I5
     *    ,15X,F19.4
     *  /20X,44HGRADIENT OF NONLINEAR CONSTRAINT FUNCTIONS . , I5
     *    ,15X,F19.4
     *  /20X,44HAPPROXIMATE CONSTRAINT FUNCTIONS . . . . . . , I5
     *    ,15X,F19.4 )
1060  FORMAT(//5X,57H* * * ERROR  SPECIFIED FINITE DIFFERENCE FOR VARIAB
     *LE NO. ,I5, 2H =, 1P,E15.6)
1070  FORMAT(/5X,40HRESULTS AT THE END OF THIS UNCONSTRAINED
     *     ,13H MINIMIZATION)
1080  FORMAT(5X,22HONE DIMENSIONAL SEARCH,I2,2X,15HTOTAL FUNCTION=,
     *  1P,E13.6,2X,19HOBJECTIVE FUNCTION=,E13.6,2X,14HMOVE DISTANCE=,
     *  E13.6)
c1082  FORMAT(2X, 22HONE DIMENSIONAL SEARCH , I2 ,
c     *        /5X, 20HTOTAL FUNCTION=      , 1P,E13.5 ,
c     *        /5X, 20HOBJECTIVE FUNCTION=  , E13.5 ,
c     *        /5X, 20HMOVE DISTANCE=       , E13.5  )
c1090  FORMAT(/3X, 20HRESPONSE SURFACE NO., I3, 5X,
c     *     19HPENALTY MULTIPLIER=, 1P,E14.6)
1100  FORMAT(16H$$$$$$$$$$$$$$$$,2I8,1P,3E16.8/(1P,5E16.8))
1120  FORMAT (' RSF=',I3,3X,'RA=',1P,E15.7,3X,'TF=',E15.7,3X,'OF=',
     1   E15.7)
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(ODM$)  <<=====
 
 
      SUBROUTINE ODM (ANALYS
     *  , AMIN  , BL    , BU    , DDOBJ , DF0   , DG    , DOBJ
     *  , TFMIN , G     , G1    , G2    , G3    , GB    , OBJ   , OBJB
     *  , OBJMIN, SN    , X     , X0
     *  , ILIN  , ISIDE , N1    , N2    , N3    , N4)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C * * PROGRAM NO.  LC0003P
C * * PROGRAMMER   L. CHENG,  H. MIURA
C * * SUBROUTINE TO CARRY OUT ONE DIMENSIONAL MINIMIZATION.
C       X     : CURRENT DESIGN
C       X0    : INITIAL DESIGN
C       OBJ   : OBJECT FUNCTION
C       DOBJ  : GRADIENT OF OBJECT FUNCTION
C       DDOBJ : SECOND DERIVATIVE OF OBJECT FUNCTION
C       G     : CONSTRAINT FUNCTION
C       DG    : GRADIENT OF CONSTRAINT FUNCTIONS
C       S     : DIRECTION SEARCHING VECTOR
C       SN    : NORMALIZED DIRECTION SEARCHING VECTOR
C       NDV   : NUMBER OF DESIGN VARIABLES
C       NTCE  : NUMBER OF EFFECTIVE CONSTRAINTS
C       RA    : RESPONSE FACTOR
C       ALPHA : MOVE DISTANCE
      EXTERNAL ANALYS
      DIMENSION     BL(N1)  , BU(N1)  ,DDOBJ(N3), DG(N4)  ,DOBJ(N1)
     *  , G(N2)   , G1(N2)  , G2(N2)  , G3(N2)  , GB(N2)
     *  , SN(N1)  , X(N1)   , X0(N1)
     *  , ILIN(N2),ISIDE(N1)
      COMMON/CONTRL/C     , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
      DATA GOLDL/0.381966D0/, GOLDR/0.618034D0/
C

      INIOBJ=0
      INICON=0
      IF(IFLAPP.EQ.0) JXREP=2
      IF(IFLAPP.NE.0) JXREP=5
  100 CONTINUE
      AL=-1.0
      ALL=0.0
      AR=-1.0
      ARR=-1.0
      FL =1.0E19
      FR =1.0E19
      FRR=1.0E19
C
      CALL FUNCTN (ANALYS, INIOBJ, INICON
     *   , ALL   , BL    , BU    , DDOBJ , DG    , DOBJ  , FLL
     *   , G     , GB    , G1    , G2    , G3    , OBJ   , OBJB
     *   , SN    , X             , X0
     *   , ILIN  , ISIDE , N1    , N2    , N3    , N4)
      F0=FLL
crmc  115 TFMIN=F0
      TFMIN=F0
      OBJMIN=OBJ
      AMIN=0.0
      IFLAG=1
      OBJ0=OBJ
      OBJB=OBJ
      IF (JPRINT.LE.2) GO TO 120
      WRITE(6, 1090)
      CALL PRINTD (X0,X,SN,OBJ0,G,DG,DOBJ,DDOBJ,F0,BU,BL,ISIDE,1,0,0,1,1
     1,0,0,0,1,1,N1,N2,N3,N4)
C
C  ------------------------------------
C  SEARCH FOR THE INITIAL MOVE DISTANCE
C  ------------------------------------
C Re-code following block due to compilation warnings 6/2009
crmc  120 IF (JFLAG) 130,130,140
crmcC
crmcC  DIRECTION OBTAINED BY THE MODIFIED NEWTON'S METHOD.
crmc  130 R1=SM
crmc      IF (JPRINT.LE.2) GO TO 160
crmc      WRITE(6, 1020) R1
crmc      GO TO 150
crmcC
crmcC  DIRECTION OBTAINED BY THE STEEPEST DESCEND.
crmc  140 R1=0.05*DABS(F0)/SM
crmc      IF (JPRINT.LE.2) GO TO 160
crmc      WRITE(6, 1030) R1
crmc  150 CONTINUE

 120  IF (JFLAG .LE. 0) THEN 
          
C     DIRECTION OBTAINED BY THE MODIFIED NEWTON'S METHOD.
         R1=SM
         IF (JPRINT.LE.2) GO TO 160
         WRITE(6, 1020) R1
      ELSE 
C     DIRECTION OBTAINED BY THE STEEPEST DESCEND.
         R1=0.05*DABS(F0)/SM
         IF (JPRINT.LE.2) GO TO 160
         WRITE(6, 1030) R1
      END IF
C
C  ADJUST MOVE DISTANCE WITH RESPECT TO SIDE CONSTRAINTS.
C
  160 LFLAG=0
      KFLAG=0
      DISTMN=0.0
      DISTMX=1E30
      DO 220 I=1,NDV
      IF(DABS(SN(I)). GT. 1.0E-7) GO TO 164
      IF(SN(I) .LE. 0.0) SN(I)=-1.0E-7
      IF(SN(I) .GT. 0.0) SN(I)= 1.0E-7
  164 CONTINUE
      IC=ISIDE(I)+1
      GO TO (220,170,200,170), IC
C  LOWER BOUND
  170 SIDEL=BL(I)-X0(I)
      DIST1=SIDEL/SN(I)
      IF(DABS(DIST1).LT.1.E-8) DIST1=0.0
      IF(SIDEL.GT.0.0) GO TO 180
      KFLAG=KFLAG+1
      GO TO 182
  180 LFLAG=LFLAG+1
  182 CONTINUE
      IF(DIST1.LE.0.0) GO TO 190
      IF(SIDEL.LE.0.0 .AND. DIST1.LE.DISTMX) DISTMX=DIST1
      IF(SIDEL.GT.0.0 .AND. DIST1.GT.DISTMN) DISTMN=DIST1
C  UPPER BOUND
  190 IF (IC.LT.4) GO TO 220
  200 SIDEU=BU(I)-X0(I)
      DIST2=SIDEU/SN(I)
      IF(DABS(DIST2).LT.1.E-8) DIST2=0.0
      IF(SIDEU.LT.0.0) GO TO 210
      KFLAG=KFLAG+1
      GO TO 212
  210 LFLAG=LFLAG+1
  212 CONTINUE
      IF(DIST2.LE.0.0) GO TO 220
      IF(SIDEU.LT.0.0 .AND. DIST2.GT.DISTMN) DISTMN=DIST2
      IF(SIDEU.GE.0.0 .AND. DIST2.LT.DISTMX) DISTMX=DIST2
  220 CONTINUE
      IF(JPRINT.LE.2) GO TO 221
      WRITE(6, 1100) DISTMX, DISTMN, R1, STEPMX
C
C  ADJUST MOVE DISTANCE WITH RESPECT TO LINEAR CONSTRAINTS.
C
  221 IF(NTCE.EQ.0) GO TO 229
      DO 228 I=1,NTCE
      IF(ILIN(I).NE.1) GO TO 228
      SUM=0.0
      JB=I-NTCE
      DO 222 J=1,NDV
      K=J*NTCE+JB
      SUM=SUM+DG(K)*SN(J)
  222 CONTINUE
      IF(DABS(SUM)  .GT. 1.0E-7) GO TO 223
      IF(SUM .LE. 0.0) SUM=-1.0E-7
      IF(SUM .GT. 0.0) SUM= 1.0E-7
  223 CONTINUE
      DIST3=-G(I)/SUM
      IF(DABS(DIST3).LT.1.E-8) DIST3=0.0
      IF(G(I).LT.0.0) GO TO 224
      KFLAG=KFLAG+1
      GO TO 226
  224 LFLAG=LFLAG+1
  226 CONTINUE
      IF(DIST3.LE.0.0) GO TO 228
      IF(G(I).GE.0.0 .AND. DIST3.LT.DISTMX) DISTMX=DIST3
      IF(G(I).LT.0.0 .AND. DIST3.GT.DISTMN) DISTMN=DIST3
  228 CONTINUE
      IF(JPRINT.LE.2) GO TO 229
      WRITE(6, 1110) DISTMX, DISTMN, R1, STEPMX
  229 CONTINUE
C
C  ADJUSTMENT OF THE INITIAL DISTANCE.
C
            DLIMIT=DISTMX
            IF(R1.GT.DISTMX) R1=DISTMX
      IF(LFLAG.EQ.0) GO TO 300
         IF(DISTMN.GE.DISTMX) GO TO 300
         IF(R1.LE.DISTMN) R1=DISTMN+0.5*G0
         IF(R1.GE.DISTMN) R1=DISTMX-0.5*G0
  300 CONTINUE
C
C  AVOID TOO SMALL INITIAL STEPSIZE TO ALLEVIATE NUMERICAL TROUBLES IN
C  COMPUTING THE QUADRATIC APPROXIMATION OF CONSTRAINTS.
C
      IF(R1.LT.1.0E-3 .AND. R1.LT.(G0+G0)) R1=G0+G0
C
C  MAXIMUM ALLOWABLE STEPSIZE CHECK.
C
      IF (R1.GT.STEPMX) R1=STEPMX
      IF (JPRINT.LE.2) GO TO 310
      WRITE(6, 1080) R1, DLIMIT
  310 CONTINUE
C
      TEST1=DABS(R1*DF0/F0)
      ARR=R1
      FTN=F0
      FRR=F0
      ALPHA=ARR
      IF (TEST1.LE.1E-7) GO TO 470
C
C  -----------------------------------------------
C  FUNCTION EVALUATION AT THE INITIAL TRIAL DESIGN
C  -----------------------------------------------
C
      CALL FUNCTN (ANALYS, 1, 3
     *   , R1    , BL    , BU    , DDOBJ , DG    , DOBJ  , FRR
     *   , G     , GB    , G1    , G2    , G3    , OBJ   , OBJB
     *   , SN    , X             , X0
     *   , ILIN  , ISIDE , N1    , N2    , N3    , N4)
      F1=FRR
crmc  315 OBJ1=OBJ
      OBJ1=OBJ
      IF (JPRINT.LE.2) GO TO 320
      CALL PRINTD (X0,X,SN,OBJ1,G,DG,DOBJ,DDOBJ,F1,BU,BL,ISIDE,0,1,0,1,1
     1,0,0,0,1,1,N1,N2,N3,N4)
C
  320 IF(F1.GE.TFMIN) GO TO 330
      TFMIN=F1
      OBJMIN=OBJ1
      AMIN=R1
      IF(R1.GT.0.1E-10) IFLAG=0
  330 CONTINUE
      ALPHA=R1
C
C  UPDATE QUADRATIC COEFFICIENTS FOR NONLINEAR CONSTRAINTS
C
      IF(NTCE.EQ.0) GO TO 410
      DO 390 I=1, NTCE
  390 G3(I)=0.0
      IF(ALPHA.LT.1.0E-6) GO TO 410
      IF(NONLC.EQ.0) GO TO 410
      ALPHA2=ALPHA*ALPHA
      DO 400 I=1, NTCE
      IF(ILIN(I).EQ.1) GO TO 400
      G3(I)=(G(I)-G1(I)-G2(I)*ALPHA)/ALPHA2
  400 CONTINUE
  410 CONTINUE
C
C  SEARCH FOR AN INTERVAL CONTAINING A MINIMUM.
C
      ICT=0
  440 CONTINUE
      ICT=ICT+1
      IF(ICT.GT.30) GO TO 470
      KRUN=-1
      IF(FLL.LE.FRR) GO TO 470
      AL=ARR
      FL=FRR
      ARR=ARR/GOLDL
      IF(DLIMIT.LT.ARR) GO TO 450
      JUMPC=1
      GO TO 460
  450 ARR=DLIMIT
      JUMPC=2
  460 CONTINUE
      ALPHA=ARR
      JRC=1
      GO TO 550
  464 FRR=FTN
      IF(JPRINT.LE.3) GO TO 466
      WRITE(6, 1060) KRUN, ALL, AL, AR, ARR, FLL, FL, FR, FRR
  466 CONTINUE
      IF(FRR.GE.FL) GO TO 470
      IF(JUMPC.EQ.1) GO TO 440
      GO TO 480
C  SHRINK THE SEARCH RANGE
  470 ICT=0
  472 ARR=ALPHA
      FRR=FTN
  480 AL=ARR*GOLDL
      AR=ARR*GOLDR
      I=0
  482 I=I+1
      ICT=ICT+1
      IF(I.EQ.1) ALPHA=AL
      IF(I.EQ.2) ALPHA=AR
      JRC=2
      GO TO 550
  486 CONTINUE
      IF(I.EQ.1) FL=FTN
      IF(I.EQ.2) FR=FTN
      IF(JPRINT.LE.3) GO TO 490
      WRITE(6, 1060) KRUN, ALL, AL, AR, ARR, FLL, FL, FR, FRR
  490 CONTINUE
      IF(I.EQ.2) GO TO 494
       IF(ICT.GE.30) GO TO 494
      IF(FL.LE.FLL) GO TO 482
      FRR=FLL
      ARR=ALL
      GO TO 472
  494 CONTINUE
C
C  GOLDEN SECTION SEARCH.
C
      KRUN=0
      IF(JPRINT.LE.2) GO TO 500
      WRITE(6, 1060) KRUN, ALL, AL, AR, ARR, FLL, FL, FR, FRR
  500 CONTINUE
  520 CONTINUE
      IF(FL.LE.FR) GO TO 540
      FLL=FL
      ALL=AL
      FL=FR
      AL=AR
      AR=ALL+(ARR-ALL)*GOLDR
      ALPHA=AR
      JRC=3
      GO TO 550
  530 FR=FTN
      GO TO 560
  540 FRR=FR
      ARR=AR
      FR=FL
      AR=AL
      AL=ALL+(ARR-ALL)*GOLDL
      ALPHA=AL
      JRC=4
  550 CONTINUE
C
      CALL FUNCTN (ANALYS, 1     , JXREP
     *   , ALPHA , BL    , BU    , DDOBJ , DG    , DOBJ  , FTN
     *   , G     , GB    , G1    , G2    , G3    , OBJ   , OBJB
     *   , SN    , X             , X0
     *   , ILIN  , ISIDE , N1    , N2    , N3    , N4)
      IF(JPRINT.LE.5) GO TO 554
      WRITE(6, 1050) ALPHA
      CALL PRINTD(X0,X,SN,OBJ,G,DG,DOBJ,DDOBJ,FTN,BU,BL,ISIDE
     *    ,0,1,0,1,1,0,0,0,1,1, N1,N2,N3,N4)
  554 CONTINUE
C
      GO TO (464,486,530,556), JRC
C
  556 FL=FTN
  560 CONTINUE
C
C  CONVERGENCE CHECK
C
      DIFF=DABS(FLL-FL)+DABS(FL-FR)+DABS(FR-FRR)
      TTT=DABS(FL)+DABS(FR)
      CR=DIFF/TTT
      DRL=ARR-ALL
      KRUN=KRUN+1
      IF(JPRINT.LE.2) GO TO 570
      WRITE(6, 1060) KRUN, ALL, AL, AR, ARR, FLL, FL, FR, FRR
  570 CONTINUE
      IF(CR.LE.EPSGSN .AND. DRL.LT.0.01) GO TO 580
      IF(KRUN.LE.MAXGSN) GO TO 520
C     skipping over added by Herb Schilling 10/20/2010
      IF (JPRINT.LT.0) GO TO 575
      WRITE(6, 1140) KRUN, ALL, AL, AR, ARR, FLL, FL, FR, FRR
  575 CONTINUE
C
  580 CONTINUE
C
C  END OF ITERATION
C
C Re-code following block due to compilation warnings 6/2009
crmc      IF(FL-FR) 590, 590, 600
crmc  590 ALPMIN=AL
crmc      FMIN=FL
crmc      GO TO 610
crmc  600 ALPMIN=AR
crmc      FMIN=FR
crmc  610 CONTINUE

      IF (FL .LE. FR) THEN
         ALPMIN=AL
         FMIN=FL
      ELSE 
         ALPMIN=AR
         FMIN=FR
      END IF

      IF(FLL.GE.FMIN) GO TO 620
      FMIN=FLL
      ALPMIN=ALL
  620 CONTINUE
      IF(FRR.GE.FMIN) GO TO 630
      FMIN=FRR
      ALPMIN=ARR
  630 CONTINUE
C
C  ANALYSIS AT THE COMPUTED MINIMUM POINT W.R.T. APPROXIMATION.
C
      IF(DABS(ALPMIN).GT.0.0) GO TO 650
      IF(JPRINT.LE.2) GO TO 650
      WRITE(6, 1120)
      GO TO 650
  650 CONTINUE
      CALL FUNCTN (ANALYS, 1, 3
     *   , ALPMIN, BL    , BU    , DDOBJ , DG    , DOBJ  , FTN
     *   , G     , GB    , G1    , G2    , G3    , OBJ   , OBJB
     *   , SN    , X             , X0
     *   , ILIN  , ISIDE , N1    , N2    , N3    , N4)
      IF(JPRINT.LE.2) GO TO 690
      WRITE(6, 1040) ALPMIN
      CALL PRINTD(X0,X,SN,OBJ,G,DG,DOBJ,DDOBJ,FTN,BU,BL,ISIDE
     *    , 0,1,0,1,1,0,0,0,1,1, N1,N2,N3,N4)
      CALL STABLE
  690 CONTINUE
      IF(FTN.LE.TFMIN) GO TO 694
      IF(JXREP.EQ.3) GO TO 694
      PERCHG=(FTN/TFMIN-1.0)*100.0
      IF(JPRINT.GE.1.AND.PERCHG.GE.0.25) WRITE(6, 1130) FTN,TFMIN,PERCHG
      IF(JPRINT.GE.1.AND.PERCHG.LT.0.25) WRITE(6, 1150) FTN,TFMIN,PERCHG
      IF(PERCHG.LT.0.25) GO TO 694
      JXREP=3
      INIOBJ=1
      INICON=3
      DO 692 I=1, NDV
  692 X(I)=X0(I)
      GO TO 100
  694 CONTINUE
      IF(JXREP.EQ.3.AND.FTN.GE.TFMIN) GO TO 700
      TFMIN=FTN
      OBJMIN=OBJ
      AMIN=ALPMIN
      IF(AMIN.GT.0.1E-10) IFLAG=0
  700 CONTINUE
      IF(JPRINT.LE.1) GO TO 750
      WRITE(6, 1070) AMIN
  750 CONTINUE
      DO 760 I=1, NDV
      X(I)=X0(I)+AMIN*SN(I)
  760 X0(I)=X(I)
C
      RETURN
C
 1020 FORMAT (/5X,13HINITIAL STEP=,1P,E13.4,5X,
     1   38HDISTANCE OF THE SECOND ORDER  SOLUTION)
 1030 FORMAT (/5X,13HINITIAL STEP=,1P,E13.4,5X,
     1   38HDISTANCE TO DECREASE OBJ BY 5 PER CENT   )
 1040 FORMAT(/3X, 37H* ANALYSIS AT THE APPROXIMATE MINIMUM , 3X
     *    , 11HSTEP SIZE = , 1P,E15.7)
 1050 FORMAT(/8X, 23HAPPROXIMATE ANALYSIS AT , 1P,E16.4)
 1060 FORMAT(20X, I8, 2(2X, 1P,4E12.5))
 1070 FORMAT(1X,5(1H-),38H END OF O.D.M. DISTANCE FOR MIN. PT. = ,
     1   1P,E15.7,  1X, 5(1H-))
 1080 FORMAT (/3X,2H* ,61HANALYSIS AT THE INITIAL TRIAL DESIGN, IMPROVED
     * INITIAL STEP = , 1P,E12.4, 5X, 8HDLIMIT =, E12.4)
 1090 FORMAT (/3X,2H* ,60HANALYSIS AT THE INITAL POINT OF ONE DIMENSIONA
     1L MINIMIZATION)
 1100 FORMAT(10X, 24HDISTMX,DISTMN,R1,STEPMX=, 5X,1P,4E12.4, 5X,4HSIDE)
 1110 FORMAT(10X, 'DISTMX,DISTMN,R1,STEPMX=', 5X,1P,4E12.4, 5X,'LINEAR')
 1120 FORMAT(/3X,47H* APPROXIMATE MINIMUM WAS LOCATED AT THE ORIGIN   )
 1130 FORMAT(/5X,'REPEAT ODM BY EXACT ANALYSIS AT ALL POINTS'/
     1   20X,'FTN=',1P,E15.7,5X,'TFMIN=',E15.7,5X,'% INC=',E15.7)
 1140 FORMAT(/5X, 31HMAXGSN ITERATIONS EXCEEDED      ,/
     1   20X, I8, 2(2X, 1P,4E12.5))
 1150 FORMAT(/5X,'SKIPPING REPEAT ODM BY EXACT ANALYSIS AT ALL POINTS',
     1   ' AS PERCENT INCREASE IS LESS THAN 0.25%'/
     2   20X,'FTN=',1P,E15.7,5X,'TFMIN=',E15.7,5X,'% INC=',E15.7)
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(PRINTD$)  <<=====
 
 
      SUBROUTINE PRINTD (X0,X,SN,OBJ,G,DG,DOBJ,DDOBJ,F,BU,BL,ISIDE,I1,I2
     1,I3,I4,I5,I6,I7,I8,I9,I10,N1,N2,N3,N4)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION X0(N1),X(N1),SN(N1),G(N2),DG(N4),DOBJ(N1),DDOBJ(N3),BU(N
     11),BL(N1),ISIDE(N1), TG(10),ITG(10)
      COMMON/CONTRL/C     , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
C  X0
      IF (I1.EQ.0) GO TO 110
      WRITE (6,260)
      WRITE (6,250) (X0(I),I=1,NDV)
C  X
  110 IF (I2.EQ.0) GO TO 120
      WRITE (6,270)
      WRITE (6,250) (X(I),I=1,NDV)
C  SN
  120 IF (I3.EQ.0) GO TO 125
      WRITE (6,280)
      WRITE (6,250) (SN(I),I=1,NDV)
C  SIDE CONSTRAINTS
  125 IF (I10.EQ.0) GO TO 140
      DO 127 I=1,NDV
      IF (ISIDE(I).EQ.0) GO TO 127
      WRITE(6,360)
      GO TO 128
  127 CONTINUE
  128 ISD=0
      DO 135 I=1,NDV
      IS=ISIDE(I)+1
      IF (I2.EQ.1) XX=X(I)
      IF (I1.EQ.1 .AND. I2.EQ.0) XX=X0(I)
      GO TO (135,131,133,131), IS
  131 ISD=ISD+1
      TG(ISD)=XX-BL(I)
      ITG(ISD)=-I
      IF (ISD.EQ.10) GO TO 132
      IF (IS.LE.2 .AND. I.NE.NDV) GO TO 135
      IF (IS.LE.2 .AND. I.EQ.NDV) GO TO 134
      GO TO 133
  132 WRITE (6,350) (ITG(L),L=1,10)
      WRITE(6,250) (TG(L),L=1,10)
      ISD=0
      IF (IS.EQ.2) GO TO 135
  133 CONTINUE
      ISD=ISD+1
      TG(ISD)=BU(I)-XX
      ITG(ISD)=I
      IF (ISD.EQ.10 .OR. I.EQ.NDV) GO TO 134
      GO TO 135
  134 WRITE (6,350) (ITG(L),L=1,ISD)
      WRITE(6,250)  (TG(L),L=1,ISD)
      ISD=0
  135 CONTINUE
C  G
  140 IF(NTCE.EQ.0) GO TO 160
      IF(I5.EQ.0) GO TO 150
      WRITE (6,300)
      WRITE (6,250) (G(I),I=1,NTCE)
C  DG
  150 IF (I6.EQ.0) GO TO 160
      WRITE (6,310)
      NDVTCE=NDV*NTCE
      IF(NDVTCE.LE.0) GO TO 160
      WRITE (6,250) (DG(I),I=1,NDVTCE)
C  DOBJ
  160 IF (I7.EQ.0) GO TO 170
      WRITE (6,320)
      WRITE (6,250) (DOBJ(I),I=1,NDV)
C  DDOBJ
  170 IF (I8.EQ.0) GO TO 180
      WRITE (6,330)
      WRITE (6,250) (DDOBJ(I),I=1,N3)
C  TOTAL FUNCTION
  180 IF (I9.EQ.0) GO TO 190
      WRITE (6,340) F
C  OBJ
  190 IF (I4.EQ.0) RETURN
      WRITE (6,290) OBJ
C
      RETURN
C
  250 FORMAT(10X,1P,10E12.4)
  260 FORMAT(10X,30HINITIAL DESIGN VARIABLE VECTOR )
  270 FORMAT(10X,30HCURRENT DESIGN VARIABLE VECTOR )
  280 FORMAT(10X,30HNORMALIZED DIRECTION VECTOR SN)
  290 FORMAT(10X,20HOBJECTIVE FUNCTION =,1P,E15.7)
  300 FORMAT(10X,11HCONSTRAINTS)
  310 FORMAT(10X,30HGRADIENT OF OBJECTIVE FUNCTION)
  320 FORMAT(10X,30HGRADIENT OF OBJECTIVE FUNCTION)
  330 FORMAT(10X,46HSECOND ORDER DERIVATIVES OF OBJECTIVE FUNCTION)
  340 FORMAT(10X,20HTOTAL FUNCTION     =,1P,E15.7)
  350 FORMAT(6X,10I12)
  360 FORMAT(10X,16HSIDE CONSTRAINTS )
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(RFACTR$)  <<=====
 
 
      SUBROUTINE RFACTR (ANALYS,X0,OBJ,DOBJ,DDOBJ,G,GB,DG,ISIDE,BU,BL
     1,X,SN,N1,N2,N3,N4)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      EXTERNAL ANALYS
      DIMENSION X0(N1),DOBJ(N1),DDOBJ(N3),G(N2),DG(N4),ISIDE(N1),BU(N1),
     1BL(N1),X(N1),SN(N1),GB(N2)
      COMMON/  CONTRL/  C         , EPSGSN, EPSODM, EPSRSF, G0    , P
     *    , RA    , RACUT , RAMIN , STEPMX
     *    , IFD   , JPRINT, JSIGNG, LOBJ  , MAXGSN, MAXODM, MAXRSF
     *    , MFLAG , NDV   , NTCE  , IFLAPP
      COMMON/INTERN/FDCH  , SM    , TFTN
     *    , IFLAG , IFTN  , ISIGNO, JFLAG , KFLAG , NFLAG , NONLC
C
C
      RA=1.0
crmc  100 IF (OBJ.EQ.0.0) RETURN
      IF (OBJ.EQ.0.0) RETURN
      PENALT=0.0
      NSIDE=0
C  SIDE CONSTRAINTS
      DO 170 I=1,NDV
      IC=ISIDE(I)+1
      GO TO (170,120,150,120), IC
  120 H=X0(I)-BL(I)
      NSIDE=NSIDE+1
      IF(H.LT.G0) GO TO 140
crmc  130 PENALT=PENALT+1.0/H
      PENALT=PENALT+1.0/H
      IF(JPRINT.LE.3) GO TO 140
      WRITE(6, 1010) I, PENALT
  140 CONTINUE
      IF (IC.EQ.2) GO TO 170
  150 H=BU(I)-X0(I)
      NSIDE=NSIDE+1
      IF(H.LT.G0) GO TO 170
crmc  160 PENALT=PENALT+1.0/H
      PENALT=PENALT+1.0/H
      IF(JPRINT.LE.3) GO TO 170
      WRITE(6, 1010) I, PENALT
  170 CONTINUE
C  GENERAL CONSTRAINTS
      IF(NTCE.EQ.0) GO TO 200
      DO 190 I=1,NTCE
      IF(G(I).LT.G0) GO TO 190
      PENALT=PENALT+1.0/G(I)
      IF(JPRINT.LE.3) GO TO 190
      WRITE(6, 1020) I, PENALT
  190 CONTINUE
  200 CONTINUE
      IF(DABS(PENALT).LT.0.1E-7) GO TO 300
      RA=OBJ/PENALT
      RA=DABS(RA)
      GO TO 400
  300 CONTINUE
        IF((NTCE+NSIDE) .LE. 0) GO TO 400
      RA=OBJ/((NTCE+NSIDE)*RACUT)
  400 CONTINUE
      IF(JPRINT.LE.3) RETURN
      WRITE(6, 1030) OBJ, RA
      RETURN
c 1000 FORMAT(/5X, 41HCALCULATION OF INITIAL PENALTY MULTIPLIER ,5X
c     *    , 6HNSIDE=, I5, 5X, 5HNTCE=, I5)
 1010 FORMAT(7X, 31HSIDE CONSTRAINT ON VARIABLE NO. ,I4, 5X, 7HPENALT=
     *    , 1P,E15.6)
 1020 FORMAT(7X, 31HGENERAL CONSTRAINT NO.          ,I4, 5X, 7HPENALT=
     *    , 1P,E15.6)
 1030 FORMAT(7X, 20HOBJECTIVE FUNCTION = , 1P,E15.6
     *     //5X, 28HINITIAL PENALTY MULTIPLIER =, E15.6)
c 9000 FORMAT(5X, 15HCONSTRAINT NO.= ,I6, 5X, 8HABS(DG)= , 1P,E15.6)
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(SAD007$)  <<=====
 
 
      SUBROUTINE SAD007 (N,AK,IIK,NER,NDAK,NDIIK)
C
C * * PROGRAM NO.  GNV1001P
C * * PROGRAMMER   GARRET N. VANDERPLAATS (NASA AMES RESEARCH CENTER)
C * * SUBROUTINE TO DECOMPOSE A SEMI-POSITIVE DEFINITE SYMMETRIC
C     MATRIX INTO L-D-U FORM.  THE MATRIX TO BE DECOMPOSED IS STORED
C      IN A VECTOR 'AK' AND THE DIAGONAL ELEMENT POSITIONS ARE
C      GIVEN BY A POINTER VECTOR 'IIK'.  (REF. R. MELOSH ET.AL. ASCE J.
C      VOL.95 NO.ST4  APRIL 1969)
C * * PARAMETERS
C        N   : SIZE OF THE MATRIX TO BE DECOMPOSED
C        AK  : MATRIX TO BE DECOMPOSED
C        IIK : POINTER VECTOR FOR DIAGONAL ELEMENT POSITIONS
C        NER : =0 FOR SUCCESFUL DECOMPOSITION,  =1 FOR ERROR RETURN
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION AK(*), IIK(NDIIK)
      IF (N.LE.1) RETURN
      NER=1
      EPS=1.0E-15
      N1=N-1
      DO 120 I=1, N1
      II=IIK(I)
      AA=AK(II)
      IF(DABS(AA).GE.EPS) GO TO 80
      WRITE(6, 1010) I, AA
      RETURN
   80 CONTINUE
      AA=1.0E0/AA
      I1=I+1
      DO 110 J=I1,N
      IC=J-(IIK(J)-IIK(J-1))
      IF (IC.GE.I) GO TO 110
      IJ=IIK(J)-(J-I)
      BB=AA*AK(IJ)
      IF (DABS(BB).LT.EPS) GO TO 110
      DO 100 K=J,N
      KK=IIK(K)-K
      KC=IIK(K-1)-KK
      IF (KC.GE.I) GO TO 100
      IK=I+KK
      JK=J+KK
      AK(JK)=AK(JK)-AK(IK)*BB
100   CONTINUE
110   CONTINUE
      IT=IIK(I1)
      AT=AK(IT)
      IF(DABS(AT).GE.EPS) GO TO 120
      WRITE(6, 1030) I, AT
      RETURN
  120 CONTINUE
      NER=0
      RETURN
 1010 FORMAT(//10X, 18HSAD007 EXIT 1, AT  , I10, 1P,E20.6)
 1030 FORMAT(//10X, 18HSAD007 EXIT 2, AT  , I10, 1P,E20.6)
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(SAD008$)  <<=====
 
 
      SUBROUTINE SAD008 (N,NLC,AK,PL,IIK,NDAK,NDPL,NDIIK)
C
C * * PROGRAM NO.  GNV1002P
C * * PROGRAMMER   GARRET N. VANDERPLAATS  (NASA AMES RESEARCH CENTER)
C * * SUBROUTINE TO CARRY OUT FORWARD AND BACKWARD SUBSTITUTION TO
C     YIELD THE SOLUTION OF A SET OF LINEAR SIMULTANEOUS EQUATIONS.
C     THE COEFFICIENT MATRIX HAS BEEN DECOMPOSED BY SAD007.
C * * PARAMETERS
C        N   : SIZE OF THE EQUATION
C        NLC : NO. OF RIGHT HAND SIDE VECTORS.
C        AK  : DECOMPOSED COEFFICIENT MATRIX
C        PL  : RIGHT HAND SIDE VECTORS, ONE AFTER THE OTHER.
C        IIK : POINTER VECTOR FOR DIAGONAL ELEMENTS IN AK.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION AK(*), PL(*), IIK(NDIIK)
      N1=N-1
      NP1=N+1
      EPS=1.0E-10
      M=-N1
      AA=1.0E0/AK(1)
      DO 100 J=1,NLC
      M=M+N
100   PL(M)=AA*PL(M)
      IF (N.LE.1) RETURN
C
C  FORWARD SUBSTITUTION.
C
      DO 150 I=2,N
      II=IIK(I)
      I1=I-1
      JJ=IIK(I1)
      KK=JJ+1
      AA=1.0E0/AK(II)
      IL=I-N
      IF (KK.GE.II) GO TO 130
      KK=KK+I-II
      DO 120 J=KK,I1
      JJ=JJ+1
      BB=AK(JJ)
      IF (DABS(BB).LT.EPS) GO TO 120
      IK=IL
      JK=J-N
      DO 110 K=1,NLC
      IK=IK+N
      JK=JK+N
110   PL(IK)=PL(IK)-BB*PL(JK)
120   CONTINUE
130   CONTINUE
      IK=IL
      DO 140 K=1,NLC
      IK=IK+N
140   PL(IK)=AA*PL(IK)
150   CONTINUE
C
C  MULTIPLY RIGHT HAND SIDE VECTORS BY D-INVERSE.
C
      DO 160 I=1,N1
      II=IIK(I)
      AA=AK(II)
      M=I-N
      DO 160 K=1,NLC
      M=M+N
160   PL(M)=AA*PL(M)
C
C  BACK SUBSTITUTION.
C
      DO 190 I=2,N
      IL=1-I
      IJ=NP1-I
      II=IIK(IJ)
      AA=1.0E0/AK(II)
      I1=I-1
      DO 180 J=1,I1
      JJ=NP1-J
      JI=IIK(JJ)+IJ-JJ
      JK=JJ-1
      JK=IIK(JK)
      IF (JI.LE.JK) GO TO 180
      BB=AK(JI)
      IF (DABS(BB).LT.EPS) GO TO 180
      IK=IL
      JK=1-J
      DO 170 K=1,NLC
      IK=IK+N
      JK=JK+N
170   PL(IK)=PL(IK)-BB*PL(JK)
180   CONTINUE
      IK=IL
      DO 190 K=1,NLC
      IK=IK+N
190   PL(IK)=AA*PL(IK)
      RETURN
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(CTIME$)  <<=====
 
 
C     REAL FUNCTION CTIME*8 (N)
      DOUBLE PRECISION FUNCTION CTIME (N)
       IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C      DATA ISTART/0/
C      IF (ISTART.NE.0) GO TO 10
C      CALL TIMEON
C      ISTART=1
C   10 CALL TIMECK(NT)
C      CTIME=-NT/100.0
      CTIME = 0.
      RETURN
      END
 
 
C        =====>>  Contents of  NEWSUMT.SRC(STABLE$)  <<=====
 
 
      SUBROUTINE STABLE
      RETURN
      END
